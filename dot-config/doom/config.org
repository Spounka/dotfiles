#+TITLE: Doom Emacs config
#+AUTHOR: Nazih Boudaakkar
#+EMAIL: nazih.boudaakkar@proton.me
#+DESCRIPTION: My doom emacs config in org mode using literate programming

* Table Of Content :toc:
- [[#peronal-meta-data][Peronal Meta data]]
- [[#display][Display]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#vertico][Vertico]]
  - [[#tabs][Tabs]]
  - [[#neo-tree][Neo-tree]]
  - [[#cross-lines][Cross Lines]]
- [[#keymaps][Keymaps]]
  - [[#dired][Dired]]
  - [[#flycheck-errors][Flycheck Errors]]
  - [[#dap-ui][DAP UI]]
- [[#plugins][Plugins]]
  - [[#org-mode][Org mode]]
  - [[#python-venv-auto-activate][Python Venv auto activate]]
  - [[#pyenv][Pyenv]]
  - [[#company-mode][Company mode]]
  - [[#codeium][Codeium]]
  - [[#lsp-ui][LSP UI]]
- [[#debugging][Debugging]]
  - [[#dap][DAP]]
  - [[#dap-ui-1][DAP-UI]]
- [[#calibre][Calibre]]

* Peronal Meta data
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!



#+begin_src elisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Nazih Boudaakkar"
      user-mail-address "nazih.boudaakkar@proton.me")

#+end_src

* Display
** Font
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))


#+begin_src elisp
;; (setq doom-font                 (font-spec :family "FiraCode Nerd Font" :size 17)
;;       doom-big-font             (font-spec :family "FiraCode Nerd Font" :size 23)
;;       doom-variable-pitch-font  (font-spec :family "SauceCodePro Nerd Font" :size 20)
;;       doom-serif-font           (font-spec :family "Liberation Serif" :size 17))

(setq doom-font (font-spec :family "JetBrainsMono Nerd Font" :size 17)
      doom-big-font (font-spec :family "JetBrainsMono Nerd Font" :size 23)
      doom-variable-pitch-font (font-spec :family "Roboto" :size 20)
      doom-serif-font (font-spec :family "DejaVu Serif" :size 17)
      doom-symbol-font (font-spec :family "Symbols Nerd Font Mono" :size 17))

;; (setq doom-font (font-spec :family "Hack Nerd Font" :size 17)
;;       doom-big-font (font-spec :family "Hack Nerd Font" :size 23)
;;       doom-variable-pitch-font (font-spec :family "Noto Sans" :size 20)
;;       doom-serif-font (font-spec :family "Liberation Serif" :size 17)
;;       doom-symbol-font (font-spec :family "Symbols Nerd Font Mono" :size 17))


(after! doom-themes
        (setq   doom-themes-enable-bold t
                doom-themes-enable-italic t))
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

** Theme
;; If you or Emacs can't find your font, use 'M-x describe-font' to look the
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
#+begin_src elisp
(setq doom-theme 'doom-monokai-spectrum)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

#+end_src

;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one

;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
** Vertico

#+begin_src elisp

(require 'vertico-posframe)
(vertico-posframe-mode 1)

(setq vertico-posframe-parameters
     '((left-fringe . 8)
       (right-fringe . 8)))
#+end_src
** Tabs
#+begin_src emacs-lisp

(setq-default tab-width 4)

#+end_src

** Neo-tree
#+begin_src elisp

(setq neo-theme (if (display-graphic-p) 'arrow))

#+end_src
** Cross Lines
#+begin_src emacs-lisp

(map! :map evil-normal-state-map "<remap> <evil-next-line>"             #'evil-next-visual-line)
(map! :map evil-normal-state-map "<remap> <evil-previous-line>"         #'evil-previous-visual-line)
(map! :map evil-motion-state-map "<remap> <evil-next-line>"             #'evil-next-visual-line)
(map! :map evil-motion-state-map "<remap> <evil-previous-line>"         #'evil-previous-visual-line)

; Make horizontal movement cross lines
(setq-default evil-cross-lines t)

#+end_src

* Keymaps
** Dired
*** Add file
#+begin_src emacs-lisp
(after! dired
  (map! :map dired-mode-map
        :leader "f n" #'dired-create-empty-file))
#+end_src
** Flycheck Errors

#+begin_src elisp

(map! :map flycheck-mode-map
        :leader "e [" #'flycheck-previous-error
        :leader "e ]" #'flycheck-next-error)

#+end_src
** DAP UI
#+begin_src elisp

(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)

#+end_src
* Plugins
** Org mode
*** CSS
#+begin_src elisp

;; Don't forget to add the following header at the top of the org file
;; #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
(setq org-html-htmlize-output-type 'css)

#+end_src
*** Org templates
#+begin_src emacs-lisp
(after! org
  ;; Personal tasks
  (setq org-capture-templates
        '(("p" "Personal TODO" entry
           (file+headline "~/Dropbox/org/personal.org" "Tasks")
           "* TODO %?\nSCHEDULED: %^t\nDEADLINE: %^t\n%a\n")
          ("P" "Personal TODO with Category" entry
           (file+headline "~/Dropbox/org/personal.org" "Tasks")
           "* TODO %?\nSCHEDULED: %^t\nDEADLINE: %^t\n%a\n%i\nCategory: %^{Category}\n")))

  ;; Freelance tasks
  (setq org-capture-templates
        (append org-capture-templates
                '(("f" "Freelance TODO" entry
                   (file+headline "~/Dropbox/org/freelance.org" "Tasks")
                   "* TODO %?\nSCHEDULED: %^t\nDEADLINE: %^t\n%a\n")
                  ("F" "Freelance TODO with Project" entry
                   (file+headline "~/Dropbox/org/freelance.org" "Tasks")
                   "* TODO %?\nSCHEDULED: %^t\nDEADLINE: %^t\n%a\n%i\nProject: %^{Project}\n")))))

(setq org-agenda-files '("~/Dropbox/org/personal.org" "~/Dropbox/org/freelance.org"))
#+end_src
*** Dropbox Sync
#+begin_src emacs-lisp
(setq org-directory "~/Dropbox/org/")
#+end_src

** Python Venv auto activate
#+begin_src elisp

(use-package pyvenv
  :config
  (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))

#+end_src
** Pyenv
#+begin_src elisp

(setq exec-path (append exec-path '("~/.pyenv/bin")))

(after! python
  (map! :map pyenv-mode-map
        :leader "m r" #'pyenv-mode-read-version))


(require 'pyenv-mode)

(defun projectile-pyenv-mode-set ()
  "Set pyenv version matching project name."
  (let ((project (projectile-project-name)))
    (if (member project (pyenv-mode-versions))
        (pyenv-mode-set project)
      (pyenv-mode-unset))))

(add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)

#+end_src

** Company mode
#+begin_src emacs-lisp

;; we recommend using use-package to organize your init.el
;; (use-package codeium
;;     ;; if you use straight
;;     ;; :straight '(:type git :host github :repo "Exafunction/codeium.el")
;;     ;; otherwise, make sure that the codeium.el file is on load-path

;;     :init
;;     ;; use globally
;;     (add-to-list 'completion-at-point-functions #'codeium-completion-at-point)
;;     ;; or on a hook
;;     ;; (add-hook 'python-mode-hook
;;     ;;     (lambda ()
;;     ;;         (setq-local completion-at-point-functions '(codeium-completion-at-point))))

;;     ;; if you want multiple completion backends, use cape (https://github.com/minad/cape):
;;     ;; (add-hook 'python-mode-hook
;;     ;;     (lambda ()
;;     ;;         (setq-local completion-at-point-functions
;;     ;;             (list (cape-super-capf #'codeium-completion-at-point #'lsp-completion-at-point)))))
;;     ;; an async company-backend is coming soon!

;;     ;; codeium-completion-at-point is autoloaded, but you can
;;     ;; optionally set a timer, which might speed up things as the
;;     ;; codeium local language server takes ~0.2s to start up
;;     (add-hook 'emacs-startup-hook
;;      (lambda () (run-with-timer 0.2 nil #'codeium-init)))

;;     :defer t ;; lazy loading, if you want
;;     :config
;;     ;; (setq use-dialog-box nil) ;; do not use popup boxes

;;     ;; if you don't want to use customize to save the api-key
;;     ;; (setq codeium/metadata/api_key "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")

;;     ;; get codeium status in the modeline
;;     (setq codeium-mode-line-enable
;;         (lambda (api) (not (memq api '(CancelRequest Heartbeat AcceptCompletion)))))
;;     (add-to-list 'mode-line-format '(:eval (car-safe codeium-mode-line)) t)
;;     ;; alternatively for a more extensive mode-line
;;     ;; (add-to-list 'mode-line-format '(-50 "" codeium-mode-line) t)

;;     ;; use M-x codeium-diagnose to see apis/fields that would be sent to the local language server
;;     (setq codeium-api-enabled
;;         (lambda (api)
;;             (memq api '(GetCompletions Heartbeat CancelRequest GetAuthToken RegisterUser auth-redirect AcceptCompletion))))
;;     ;; you can also set a config for a single buffer like this:
;;     ;; (add-hook 'python-mode-hook
;;     ;;     (lambda ()
;;     ;;         (setq-local codeium/editor_options/tab_size 4)))

;;     ;; You can overwrite all the codeium configs!
;;     ;; for example, we recommend limiting the string sent to codeium for better performance
;;     (defun my-codeium/document/text ()
;;         (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (min (+ (point) 1000) (point-max))))
;;     ;; if you change the text, you should also change the cursor_offset
;;     ;; warning: this is measured by UTF-8 encoded bytes
;;     (defun my-codeium/document/cursor_offset ()
;;         (codeium-utf8-byte-length
;;             (buffer-substring-no-properties (max (- (point) 3000) (point-min)) (point))))
;;     (setq codeium/document/text 'my-codeium/document/text)
;;     (setq codeium/document/cursor_offset 'my-codeium/document/cursor_offset))


#+end_src
** Codeium
#+begin_src elisp

;; (use-package company
;;     :defer 0.2
;;     :config
;;     (global-company-mode t)
;;     (setq-default
;;         company-idle-delay 0.02
;;         company-require-match nil
;;         company-minimum-prefix-length 0

;;         ;; get only preview
;;         company-frontends '(company-preview-frontend)
;;         ;; also get a drop down
;;         company-frontends '(company-pseudo-tooltip-frontend company-preview-frontend)
;;         ))

#+end_src
** LSP UI
#+begin_src elisp

(add-hook 'lsp-mode! #'lsp-ui-sideline-toggle-symbols-info)

#+end_src
* Debugging
** DAP
#+begin_src elisp

;; Enabling only some features
(setq dap-auto-configure-features '(sessions locals controls tooltip))

#+end_src
** DAP-UI
#+begin_src emacs-lisp
;; (setq dap-auto-configure-features '(sessions locals controls tooltip))
#+end_src
*** Python
#+begin_src emacs-lisp
(require 'dap-python)
;; if you installed debugpy, you need to set this
;; https://github.com/emacs-lsp/dap-mode/issues/306
(setq dap-python-debugger 'debugpy)

(dap-register-debug-template "Customizable Config"
  (list :type "python"
        :args "-i"
        :debugger "debugpy"
        :env '(("DEBUG" . "1"))
        :request "launch"
        :name "Python :: Customizable Configuration"))

(dap-register-debug-template "Python :: Attach to running process"
  (list :type "python"
        :request "attach"
        :processId "${command:pickProcess}"
        :name "Python :: Attach to running process"))

#+end_src
* Calibre
#+begin_src elisp

(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

(require 'calibredb)
(setq calibredb-root-dir "/mnt/shared/Calibre")
(setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
;; (setq calibredb-library-alist '(("/mnt/shared/Calibre")
;;                                 ("/Users/damonchan/Documents/Books Library")
;;                                 ("/Users/damonchan/Documents/HELLO")
;;                                 ("/Users/damonchan/Documents/Books")
;;                                 ("/Users/damonchan/Documents/World")))

;; (calibre :variables
;;          calibredb-root-dir "/mnt/shared/Calibre")

#+end_src
